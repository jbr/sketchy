(include "./common")

(defvar io      (require "./socket.io")
        path    (require 'path)
        fs      (require 'fs)
        url     (require 'url)
        http    (require 'http))


(defun serve-file (file-name response)
  (defvar content-type (switch (path.extname file-name)
                               (".html" "text/html")
                               (".css"  "text/css")
                               (".js"   "text/javascript")))


  (fs.read-file (concat **dirname "/public/" file-name)
     (lambda (err data)
       (if err
           (progn
             (response.write-head 404)
             (response.write "404")
             (response.end))
         (progn
           (response.write-head 200
                                (hash "Content-Type" content-type))
           (response.write data, 'utf8)
           (response.end))))))
     
(defvar server (http.create-server (lambda (request response)
  (defvar path (get (url.parse request.url) 'pathname))
  (switch path
          ("/" (serve-file 'index.html response))
          (default (serve-file path response))))))

(server.listen 8888)


(defvar socket-server             (io.listen server)
        remote-callable-functions (hash)
        sockets                   socket-server.clients-index
        points                    (hash)
        colors                    (hash))

(defun random-int (max) (-math.floor (* max (-math.random))))

(defun random-color ()
  (list (random-int 255) (random-int 255) (random-int 255)))

(socket-server.on 'connection
		  (lambda (socket)
		    (defvar socket-id socket.session-id)

		    (set colors socket-id (random-color))
		    (remote sync-colors colors)

		    (set points socket-id (list))
		    (remote sync-points points)

		    (broadcast (lambda (socket)
				 (remote sync-color socket-id
					 (get colors socket-id))))

		    (socket.on 'message
			       (lambda (message)
				 (defvar message (json.parse message))
				 (defvar fn (get remote-callable-functions
						 message.fn))
				 (defvar args (get message 'args))
				 (when (and (defined? args) (defined? fn))
				   (args.unshift socket)
				   (apply fn args))))

		    (socket.on 'disconnect
			       (lambda (&rest args)
				 (broadcast (lambda (socket)
					      (remote remove socket-id)))
				 (delete (get points  socket-id)
                                         (get colors  socket-id)
                                         (get sockets socket-id))))))

(defun broadcast (fn)
  (each (session-id) (keys sockets)
	(defvar socket (get sockets session-id))
	(when socket (fn socket))))

(defun add-point (id point)
  (when (undefined? (get points id))
    (set points id (list)))
  (defvar current-points (get points id))
  (current-points.push point)
  (when (> current-points.length *history-length*)
    (set points id (current-points.slice (- 0 *history-length*)))))

(defremote mouse-move (originating-socket x y new-segment)
  (add-point originating-socket.session-id x y new-segment)
  (broadcast (lambda (socket)
	       (remote add-point originating-socket.session-id x y new-segment))))

